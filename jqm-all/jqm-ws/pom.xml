<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.enioka.jqm</groupId>
        <artifactId>jqm-all</artifactId>
        <version>3.0.0-SNAPSHOT</version>
    </parent>

    <artifactId>jqm-ws</artifactId>
    <name>${project.groupId}:${project.artifactId}</name>
    <packaging>jar</packaging>
    <url>http://jqm.readthedocs.org</url>
    <description>JQM web API implementation and administration UI</description>

    <properties>
        <sonar.exclusions>src/main/webapp/dist/**</sonar.exclusions>
        <node.dir>${project.basedir}/target/node</node.dir>
        <jsplugin.version>1.6</jsplugin.version>
    </properties>


    <profiles>
        <!-- Disable webpack prod build when using dev mode -->
        <!-- It is enabled inside the exec:exec goal -->
        <profile>
            <id>dev</id>
            <activation>
                <property>
                    <!-- Also disable this build when inside eclipse or vs code. -->
                    <name>m2e.version</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <version>${jsplugin.version}</version>
                        <executions>
                            <execution>
                                <id>webpack build</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <resources>
            <resource>
                <directory>src/main/webapp</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/dist/main.bundle*.js</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/webapp</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>**/dist/main.bundle*.js</exclude>
                </excludes>
            </resource>
        </resources>

        <plugins>
            <!-- For OSGi only, copy shiro ini file inside the Shirao-accessible classpath -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/classes/org/apache/shiro/jqm</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/webapp/WEB-INF</directory>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>shiro.ini</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- run mvn jetty:run to test (with hot deployment) the app on a dev
				computer. localhost:8080 -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${jetty.version}</version>
                <configuration>
                    <scanIntervalSeconds>10</scanIntervalSeconds>
                    <useProvidedScope>true</useProvidedScope>
                    <useTestScope>true</useTestScope>
                    <jettyXml>${project.basedir}/src/test/resources/jetty.xml</jettyXml>
                    <httpConnector>
                        <port>8080</port>
                        <name>testConnector</name>
                    </httpConnector>
                    <webApp>
                        <contextPath>/</contextPath>
                        <overrideDescriptor>${project.basedir}/src/test/resources/web-jetty.xml</overrideDescriptor>
                    </webApp>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.eclipse.persistence</groupId>
                        <artifactId>org.eclipse.persistence.moxy</artifactId>
                        <version>2.7.6</version>
                    </dependency>
                    <dependency>
                        <groupId>org.slf4j</groupId>
                        <artifactId>jul-to-slf4j</artifactId>
                        <version>${slf4j.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                        <version>${commons.logging.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-api</artifactId>
                        <version>${slf4j.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>${jsplugin.version}</version>

                <configuration>
                    <nodeVersion>v8.11.4</nodeVersion>
                    <installDirectory>target/</installDirectory>
                </configuration>

                <executions>
                    <execution>
                        <id>install node and npm</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <phase>initialize</phase>
                    </execution>

                    <execution>
                        <id>npm install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>

                        <phase>generate-resources</phase>

                        <configuration>
                            <arguments>install --no-optional</arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>webpack build</id>
                        <goals>
                            <goal>webpack</goal>
                        </goals>

                        <phase>generate-resources</phase>

                        <configuration>
                            <arguments>--config webpack.prod.js</arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Used for creating a viable autoreload dev environment. 1) launch
				the webpack build in background. 2) Create a compound goal exec:exec to run
				jetty+ webpack. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <executions>
                    <execution>
                        <id>startwebpacksrv</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>

                        <configuration>
                            <addOutputToClasspath>false</addOutputToClasspath>
                            <async>true</async>
                            <asyncDestroyOnShutdown>true</asyncDestroyOnShutdown>
                            <commandlineArgs>${node.dir}/node_modules/npm/bin/npm-cli.js run watch</commandlineArgs>
                            <executable>${node.dir}/node</executable>
                            <workingDirectory>${project.basedir}</workingDirectory>
                        </configuration>
                    </execution>

                    <execution>
                        <id>default-cli</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>

                        <configuration>
                            <executable>mvn</executable>
                            <asyncDestroyOnShutdown>true</asyncDestroyOnShutdown>
                            <arguments>
                                <argument>exec:exec@startwebpacksrv</argument>
                                <argument>jetty:run</argument>
                                <argument>-Pdev</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>biz.aQute.bnd</groupId>
                <artifactId>bnd-maven-plugin</artifactId>
                <version>${maven.bnd.plugin.version}</version>
                <configuration>
                    <bnd><![CDATA[
                        # Do not actually deploy this as an OSGi WAR but as JAX-RS whiteboard resources
                        # Web-ContextPath: /ws
                        # BND issue with multi version jars. https://github.com/bndtools/bnd/issues/2227
                        -fixupmessages: "Classes found in the wrong directory";is:=warning
                        # This is WAB, i.e. a WAR with an OSGi descriptor.
                        #-wab:
                        # do not put libs inside META-INF/lib inside Bundle-Classpath - we want to use the same bundles as the rest of the application.
                        #-wablib:
                        -removeheaders: Private-Package
                        #Import-Package: org.apache.shiro.cache,org.apache.shiro.authz,org.apache.shiro.codec,org.apache.shiro.realm,org.apache.shiro.subject,org.apache.shiro.util,org.apache.shiro.authc,org.apache.shiro.web.filter.authc,\
                        #    javax.servlet,javax.servlet.http,javax.ws.rs,javax.ws.rs.ext,javax.naming,\
                        #    java.security.cert,java.lang.annotation,\
                        #    org.slf4j,\
                        #    org.glassfish.jersey.servlet,org.eclipse.persistence.jaxb,org.glassfish.jersey.server,org.glassfish.jersey.server.monitoring,\
                        #    com.enioka.jqm.api.client.core,com.enioka.jqm.pki,com.enioka.admin,com.enioka.jqm.model,com.enioka.jqm.jdbc,com.enioka.jqm.xml
                        # Export-Package: com.enioka.jqm.ws.api,com.enioka.jqm.ws.webui.shiro
                    ]]>
                    </bnd>
                </configuration>
            </plugin>
        </plugins>
    </build>


    <dependencies>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.aries.spec</groupId>
            <artifactId>org.apache.aries.javax.jax.rs-api</artifactId>
            <version>${jaxrs.api.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.service.http.whiteboard</artifactId>
            <version>1.1.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- Security -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-web</artifactId>
            <version>${shiro.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.shiro</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.enioka.jqm</groupId>
            <artifactId>jqm-pki</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId> commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.4</version>
        </dependency>

        <!-- For the client API -->
        <!-- This includes HTTPCLIENT, which is used in tests in this project -->
        <dependency>
            <groupId>com.enioka.jqm</groupId>
            <artifactId>jqm-api-client-jdbc</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.enioka.jqm</groupId>
            <artifactId>jqm-admin</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.enioka.jqm</groupId>
            <artifactId>jqm-model</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.enioka.jqm</groupId>
            <artifactId>jqm-xml</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>${httpclient.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Some log -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>${slf4j.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>${commons.logging.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Stupid java IO APIs solution -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons.io.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>${commons.lang.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Sample DB & DB pool for tests only -->
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jdbc</artifactId>
            <version>${pool.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <version>${hsqldb.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Java 9+ compat -->
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.3.1</version>
            <scope>provided</scope>
        </dependency>

    </dependencies>
</project>
