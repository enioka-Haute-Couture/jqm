<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.enioka.jqm</groupId>
        <artifactId>jqm-all</artifactId>
        <version>3.0.0-SNAPSHOT</version>
    </parent>

    <artifactId>jqm-ws</artifactId>
    <name>${project.groupId}:${project.artifactId}</name>
    <packaging>war</packaging>
    <url>http://jqm.readthedocs.org</url>
    <description>JQM web API implementation and administration UI</description>

    <properties>
        <sonar.exclusions>src/main/react/build/**</sonar.exclusions>
        <node.dir>${project.basedir}/target/node</node.dir>
        <jsplugin.version>1.12.0</jsplugin.version>
        <spa.build.repo>src/main/react/build/</spa.build.repo>
    </properties>


    <profiles>
        <!-- Disable yarn prod build when using dev mode -->
        <!-- It is enabled inside the exec:exec goal -->
        <profile>
            <id>dev</id>
            <activation>
                <property>
                    <!-- Also disable this build when inside eclipse or vs code. -->
                    <name>m2e.version</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <version>${jsplugin.version}</version>
                        <executions>
                            <execution>
                                <id>yarn build</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <plugins>
            <!-- run mvn jetty:run to test (with hot deployment) the app on a dev
				computer. localhost:8080 -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${jetty.version}</version>
                <configuration>
                    <scanIntervalSeconds>10</scanIntervalSeconds>
                    <useProvidedScope>true</useProvidedScope>
                    <useTestScope>true</useTestScope>
                    <jettyXml>${project.basedir}/src/test/resources/jetty.xml</jettyXml>
                    <httpConnector>
                        <port>8080</port>
                        <name>testConnector</name>
                    </httpConnector>
                    <webApp>
                        <contextPath>/</contextPath>
                        <overrideDescriptor>${project.basedir}/src/test/resources/web-jetty.xml</overrideDescriptor>
                    </webApp>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.eclipse.persistence</groupId>
                        <artifactId>org.eclipse.persistence.moxy</artifactId>
                        <version>2.7.6</version>
                    </dependency>
                    <dependency>
                        <groupId>org.slf4j</groupId>
                        <artifactId>jul-to-slf4j</artifactId>
                        <version>${slf4j.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                        <version>${commons.logging.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-api</artifactId>
                        <version>${slf4j.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>${jsplugin.version}</version>

                <configuration>
                    <nodeVersion>v20.14.0</nodeVersion>
                    <yarnVersion>v1.22.22</yarnVersion>
                    <installDirectory>target/</installDirectory>
                    <workingDirectory>src/main/react</workingDirectory>
                </configuration>

                <executions>
                    <execution>
                        <id>install node and yarn</id>
                        <goals>
                            <goal>install-node-and-yarn</goal>
                        </goals>
                        <phase>initialize</phase>
                    </execution>

                    <execution>
                        <id>yarn install</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <configuration>
                            <arguments>install</arguments>
                        </configuration>
                        <phase>generate-resources</phase>
                    </execution>

                    <execution>
                        <id>yarn build</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <configuration>
                            <arguments>build</arguments>
                        </configuration>
                        <phase>generate-resources</phase>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${plugin.war.version}</version>
                <configuration>
                    <webResources>
                        <resource>
                            <directory>src/main/react/build</directory>
                            <filtering>true</filtering>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>

        </plugins>
    </build>


    <dependencies>
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>${jakarta.servlet-api.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <version>${jaxrs.api.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <version>${jakarta.xml.bind-api.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Security -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-web</artifactId>
            <version>${shiro.version}</version>
            <classifier>jakarta</classifier>
        </dependency>

        <!-- PKI for certificate creation in admin API -->
        <dependency>
            <groupId>com.enioka.jqm</groupId>
            <artifactId>jqm-pki</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- For the client API -->
        <dependency>
            <groupId>com.enioka.jqm</groupId>
            <artifactId>jqm-api-client-jdbc</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.enioka.jqm</groupId>
            <artifactId>jqm-admin</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.enioka.jqm</groupId>
            <artifactId>jqm-xml</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- Stupid java IO APIs solution -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons.io.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>${commons.lang.version}</version>
        </dependency>

        <!-- Register our custom objectmapper -->
        <dependency>
            <artifactId>jqm-serializer-jackson</artifactId>
            <groupId>${project.groupId}</groupId>
            <version>${project.version}</version>
            <exclusions>
                <!-- We only need the lib itself in webapp class path in order for it to be scanned
                for annotations. The rest is coming from server class path -->
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Do not package slf4j - use server version -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
            <scope>provided</scope>
        </dependency>


        <!-- Sample DB & DB pool for tests only -->
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jdbc</artifactId>
            <version>${pool.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <version>${hsqldb.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>
</project>
