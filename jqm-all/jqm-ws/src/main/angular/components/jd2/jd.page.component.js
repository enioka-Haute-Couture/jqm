'use strict';

import template from './jd.page.template.html';

class JdPageCtrl
{
    constructor(µJdDto, µQueueDto)
    {
        this.jds = [];
        this.selected_jd = null;

        this.µJdDto = µJdDto;
        this.µQueueDto = µQueueDto;
        this.queues = µQueueDto.query();

        this.refresh();
    }

    refresh()
    {
        // Keep selection if any
        var previousSelection = this.selected_jd;

        var $ctrl = this;
        this.µJdDto.query().$promise.then(function (data)
        {
            $ctrl.jds = data.sort(function (a, b) { return a.applicationName.localeCompare(b.applicationName) });

            var found = false;
            if (previousSelection)
            {
                for (var jd in data)
                {
                    if (data[jd].id === previousSelection.id)
                    {
                        $ctrl.selected_jd = $ctrl.jds[jd];
                        found = true;
                        break;
                    }
                }
            }

            if (!found && data && data.length > 1)
            {
                $ctrl.selected_jd = $ctrl.jds[0];
            }
        });
    };

    newitem(type)
    {
        var t = new this.µJdDto({
            description: 'what the job does',
            queueId: this.queues[0].id,
            javaClassName: 'com.company.product.ClassName',
            canBeRestarted: true,
            highlander: false,
            jarPath: 'relativepath/to/file.jar',
            enabled: true,
            parameters: [],
            applicationName: "job definition " + (this.jds.length + 1),
            pathType: type,
            schedules: [],
        });

        if (type === "DIRECTEXECUTABLE")
        {
            t.jarPath = 'path/to/executable';
        }
        if (type === "DEFAULTSHELLCOMMAND")
        {
            t.jarPath = 'echo "hello"';
        }

        this.jds.push(t);
        this.selected_jd = t;
    };

    save()
    {
        // Save and refresh the table - ID may have been generated by the server.
        this.µJdDto.saveAll({}, this.jds, this.refresh.bind(this));
    };

    // Only remove from list - save() will sync the list with
    // the server so no need to delete it from server now
    remove()
    {
        this.jds.splice(this.jds.indexOf(this.selected_jd), 1);
        if (this.jds.length > 1)
        {
            this.selected_jd = this.jds[0];
        }
        else
        {
            this.selected_jd = null;
        }
    };
}
JdPageCtrl.$inject = ["µJdDto", "µQueueDto",];


export const jdPageComponent = {
    controller: JdPageCtrl,
    template: template,
    bindings: {}
};
