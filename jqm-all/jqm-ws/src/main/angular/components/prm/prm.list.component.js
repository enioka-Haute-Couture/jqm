'use strict';

import template from './prm.list.template.html';
import { createGlobalFilter } from '../../helpers/filters';


class PrmListCtrl
{
    constructor(µPrmDto, $interval)
    {
        this.prms = null;
        this.selected = [];

        this.µPrmDto = µPrmDto;
        this.$interval = $interval;

        this.filterOptions = {
            filterText: '',
        };

        var $ctrl = this;
        this.gridOptions = {
            data: '$ctrl.prms',

            enableSelectAll: false,
            enableRowSelection: true,
            enableRowHeaderSelection: false,
            enableFullRowSelection: true,
            enableFooterTotalSelected: false,
            multiSelect: false,
            enableSelectionBatchEvent: false,
            noUnselect: true,

            enableColumnMenus: false,
            enableCellEditOnFocus: true,
            virtualizationThreshold: 20,
            enableHorizontalScrollbar: 0,

            onRegisterApi: function (gridApi)
            {
                $ctrl.gridApi = gridApi;
                gridApi.selection.on.rowSelectionChanged(null, function (rows)
                {
                    $ctrl.selected = gridApi.selection.getSelectedRows();
                });

                gridApi.cellNav.on.navigate(null, function (newRowCol, oldRowCol)
                {
                    if (newRowCol !== oldRowCol)
                    {
                        gridApi.selection.selectRow(newRowCol.row.entity);
                    }
                });

                gridApi.grid.registerRowsProcessor(createGlobalFilter($ctrl, ['key', 'value',]), 200);
            },

            columnDefs: [{
                field: 'key',
                displayName: 'Name',
                width: '30%',
                sort: { direction: "asc" },
            }, {
                field: 'value',
                displayName: 'Value',
            }]
        };

        this.helpcontent = {
            title: "These parameters apply to every node inside the cluster.",
            paragraphs: ["On this page, one may change the global cluster parameters. Please see the full documentation for the parameters. The need to reboot after a change depends on the parameter.",
            ],
            columns: {
                "Name": "The parameter key. Not necessarily unique.",
                "Value": "The value of the parameter"
            }
        };

        this.refresh();
    }

    newprm()
    {
        var t = new this.µPrmDto({
            key: 'name',
            value: 'enter value',
        });
        this.prms.push(t);
        this.gridApi.selection.selectRow(t);
        var $ctrl = this;
        this.$interval(function ()
        {
            $ctrl.gridApi.cellNav.scrollToFocus(t, $ctrl.gridOptions.columnDefs[0]);
        }, 0, 1);
    };

    save()
    {
        // Save and refresh the table - ID may have been generated by the server.
        this.µPrmDto.saveAll({}, this.prms, this.refresh.bind(this));
    };

    refresh()
    {
        this.selected.length = 0;
        this.prms = this.µPrmDto.query();
    };

    // Only remove from list - save() will sync the list with the server so no need to delete it from server now
    remove()
    {
        var q = null;
        for (var i = 0; i < this.selected.length; i++)
        {
            q = this.selected[i];
            this.prms.splice(this.prms.indexOf(q), 1);
        }
        this.selected.length = 0;
    };
};
PrmListCtrl.$inject = ['µPrmDto', '$interval'];


export const prmListComponent = {
    controller: PrmListCtrl,
    template: template,
    bindings: {}
};
