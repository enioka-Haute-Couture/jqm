'use strict';

import template from './queue.list.template.html';
import { createGlobalFilter } from '../../helpers/filters';


class QueueListCtrl {
	constructor(µQueueDto, jqmCellTemplateBoolean, jqmCellEditorTemplateBoolean, uiGridConstants, $interval) {
		var ctx = this;
		this.$interval = $interval;
		this.µQueueDto = µQueueDto;

		this.queues = null;
		this.selected = [];

		this.gridOptions = {
			data: '$ctrl.queues',

			enableSelectAll: false,
			enableRowSelection: true,
			enableRowHeaderSelection: true,
			enableFullRowSelection: false,
			enableFooterTotalSelected: false,
			multiSelect: true,
			enableSelectionBatchEvent: false,
			noUnselect: false,

			enableColumnMenus: false,
			enableCellEditOnFocus: true,
			virtualizationThreshold: 20,
			enableHorizontalScrollbar: 0,

			onRegisterApi: function (gridApi) {
				ctx.gridApi = gridApi;
				gridApi.selection.on.rowSelectionChanged(null, function (rows) {
					ctx.selected = gridApi.selection.getSelectedRows();
				});

				/*gridApi.cellNav.on.navigate($scope,function(newRowCol, oldRowCol){
					if (newRowCol !== oldRowCol)
					{
						gridApi.selection.selectRow(newRowCol.row.entity);
					}
				});*/

				ctx.gridApi.grid.registerRowsProcessor(createGlobalFilter(ctx, ['name', 'description']), 200);
			},

			columnDefs: [{
				field: 'name',
				displayName: 'Name',
				width: '**',
				sort: {
					direction: uiGridConstants.DESC,
					priority: 0
				},
			}, {
				field: 'description',
				displayName: 'Description',
				width: '*****',
			}, {
				field: 'defaultQueue',
				displayName: 'Is default',
				cellTemplate: jqmCellTemplateBoolean,
				editableCellTemplate: jqmCellEditorTemplateBoolean,
				width: '*',
			}]
		};

		this.helpcontent = {
			title: "These are FIFO (First In First Out) queues in which batch job execution requests will wait.",
			paragraphs: ["On this page, one may change the characteristics of queues. Changes on this page do not require node reboots.",
			],
			columns: {
				"Name": "The name of the queue. This name is very important, as it the key used to designate the queue in the different APIs (for example, when submitting an execution request, one may specify by name a queue in which the request will wait). However, it can still be changed - internally, JQM uses an ID, not this name - the impact is only on the clients' side.",
				"Description": "A free text description that appears in reports",
				"is default": "The queue used when none is specified. There can only be one default queue."
			}
		};

		this.refresh();
	}

	newqueue() {
		var t = new this.µQueueDto({
			name: 'new queue',
			description: 'enter description',
			defaultQueue: false
		});
		this.queues.push(t);
		this.gridApi.selection.selectRow(t);
		var ctx = this;
		this.$interval(function () {
			ctx.gridApi.cellNav.scrollToFocus(t, ctx.gridOptions.columnDefs[0]);
		}, 0, 1);
	};

	save() {
		// Save and refresh the table - ID may have been
		// generated by the server.
		this.µQueueDto.saveAll({}, this.queues, this.refresh.bind(this));
	};

	refresh() {
		this.selected.length = 0;
		this.queues = this.µQueueDto.query();
	};

	remove() {
		var q = null;
		for (var i = 0; i < this.selected.length; i++) {
			q = this.selected[i];
			if (q.id !== null && q.id !== undefined) {
				q.$remove({
					id: q.id
				});
			}
			this.queues.splice(this.queues.indexOf(q), 1);
		}
		this.selected.length = 0;
	};
};
QueueListCtrl.$inject = ["µQueueDto", "jqmCellTemplateBoolean", "jqmCellEditorTemplateBoolean", "uiGridConstants", "$interval"];

export const queueListComponent = {
	controller: QueueListCtrl,
	template: template,
	bindings: {
		someInput: '<',
		someOutput: '&'
	}
};
