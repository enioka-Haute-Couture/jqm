'use strict';

var jqmControllers = angular.module('jqmControllers');

jqmControllers
		.controller(
				'µJdListCtrl',
				function($scope, $http, $uibModal, $interval, µJdDto, µQueueDto, jqmCellTemplateBoolean, jqmCellEditorTemplateBoolean) {
					$scope.jds = null;
					$scope.selected = [];
					$scope.queues = [];
					$scope.gridApi = null;
					
					$scope.newitem = function() {
						var t = new µJdDto({
							description : 'what the job does',
							queueId : 1,
							javaClassName : 'com.company.product.ClassName',
							canBeRestarted : true,
							highlander : false,
							jarPath : 'relativepath/to/file.jar',
							enabled : true,
							parameters : [],
							applicationName : "job definition " + ($scope.jds.length + 1),
						});
						$scope.jds.push(t);
						$scope.gridApi.selection.selectRow(t);
				        $interval(function() {
				            $scope.gridApi.cellNav.scrollToFocus(t, $scope.gridOptions.columnDefs[0]);
				        }, 0, 1);
					};

					$scope.save = function() {
						// Save and refresh the table - ID may have been
						// generated by the server.
						µJdDto.saveAll({}, $scope.jds, $scope.refresh);
					};

					$scope.refresh = function() {
						$scope.selected.length = 0;
						$scope.jds = µJdDto.query();
						// $scope.queues = µQueueDto.query();
						µQueueDto.query().$promise.then(function(data) {
							// Do not simply replace the list - append to it so
							// as to keep the same pointers as those saved in
							// the grid configuration.
							$scope.queues.length = 0;
							Array.prototype.push.apply($scope.queues, data);
						});
					};

					// Only remove from list - save() will sync the list with
					// the server so no need to delete it from server now
					$scope.remove = function() {
						var q = null;
						for (var i = 0; i < $scope.selected.length; i++) {
							q = $scope.selected[i];
							$scope.jds.splice($scope.jds.indexOf(q), 1);
						}
						$scope.selected.length = 0;
					};

					$scope.gridOptions = {
						data : 'jds',

						enableSelectAll : false,
						enableRowSelection : true,
						enableRowHeaderSelection : false,
						enableFullRowSelection : true,
						enableFooterTotalSelected : false,
						multiSelect : false,
						
						enableColumnMenus : false,
						enableCellEditOnFocus : true,
						virtualizationThreshold : 20,
						enableHorizontalScrollbar : 0,

						onRegisterApi : function(gridApi) {
							$scope.gridApi = gridApi;
							gridApi.selection.on.rowSelectionChanged($scope, function(rows) {
								$scope.selected = gridApi.selection.getSelectedRows();
							});
							
							gridApi.cellNav.on.navigate($scope,function(newRowCol, oldRowCol){
								if (newRowCol !== oldRowCol)
								{
									gridApi.selection.selectRow(newRowCol.row.entity);
								}
				            });
							
							$scope.gridApi.grid.registerRowsProcessor(createGlobalFilter($scope, [ 'applicationName', 'description', 'module', 'application',
									'javaClassName' ]), 200);
						},

						
						columnDefs : [
								{
									field : 'applicationName',
									displayName : 'Name',
									width : '**',
								},
								{
									field : 'description',
									displayName : 'Description',
									width : '***',
								},
								{
									field : 'javaClassName',
									displayName : 'Class to launch',
									width : '**',
								},
								{
									field : 'jarPath',
									displayName : 'Path to the jar (relative to repo)',
									width : '***',
								},
								{
									field : 'canBeRestarted',
									displayName : 'R',
									cellTemplate : jqmCellTemplateBoolean,
									editableCellTemplate : jqmCellEditorTemplateBoolean,
									width : 28,
								},
								{
									field : 'highlander',
									displayName : 'H',
									cellTemplate : jqmCellTemplateBoolean,
									editableCellTemplate : jqmCellEditorTemplateBoolean,
									width : 28,
								},
								{
									field : 'queueId',
									displayName : 'Queue',
									cellTemplate : '<div class="ui-grid-cell-contents"><span ng-cell-text>{{ (row.entity["queueId"] | getByProperty:"id":grid.appScope.queues).name }}</span></div>',
									editableCellTemplate : 'ui-grid/dropdownEditor',
									editDropdownValueLabel : 'name',
									editDropdownOptionsArray : $scope.queues,
								}, {
									field : 'application',
									displayName : 'Application'
								}, {
									field : 'module',
									displayName : 'Module'
								}, {
									field : 'keyword1',
									displayName : 'Keyword1'
								}, {
									field : 'keyword2',
									displayName : 'Keyword2'
								}, {
									field : 'keyword3',
									displayName : 'Keyword3'
								}, {
									field : 'reasonableRuntimeLimitMinute',
									displayName : 'AlertMn',
									type : 'number',
								},
								{
									field : 'schedules.length',
									displayName : 'S',
									enableCellEdit: false,
									width : 28,
								},
								{
									field : 'enabled',
									displayName : 'E',
									cellTemplate : jqmCellTemplateBoolean,
									editableCellTemplate : jqmCellEditorTemplateBoolean,
									width : 28,
								}, ]
					};

					$scope.clo  = function() {
						$uibModal.open({
							templateUrl : './template/jd_clo.html',
						controller : 'jdClo',
						size : 'lg',
							resolve : {
								jd : function() {
									return $scope.selected[0];
								}
							},
						});
					}
					$scope.prms = function() {
						$uibModal.open({
							templateUrl : './template/jd_prms.html',
							controller : 'jdPrms',
							size : 'lg',
							resolve : {
								jd : function() {
									return $scope.selected[0];
								}
							},
						});

					};
					
					$scope.cron = function() {
						$uibModal.open({
							templateUrl : './template/jd_cron.html',
							controller : 'jdCron',
							size : 'lg',
							resolve : {
								jd : function() {
									return $scope.selected[0];
								},
								queues: function() {
									return $scope.queues;
								}
							},
						});
					}

					$scope.refresh();
				});

jqmApp.controller('jdPrms', function($scope, $uibModalInstance, jd) {
	$scope.selectedJd = jd;
	$scope.data = {
		newKey : null,
		newValue : null
	};

	$scope.addPrm = function() {
		var np = {};
		np.key = $scope.data.newKey;
		np.value = $scope.data.newValue;
		$scope.selectedJd.parameters.push(np);
	};

	$scope.delPrm = function(prm) {
		$scope.selectedJd.parameters.splice($scope.selectedJd.parameters.indexOf(prm), 1);
	};

	$scope.ok = function() {
		$uibModalInstance.close();
	};
});

jqmApp.controller('jdClo', function($scope, $uibModalInstance, jd) {
	$scope.selectedJd = jd;
	$scope.data = {
		specificIsolationContext : $scope.selectedJd.specificIsolationContext,
		hiddenJavaClasses : $scope.selectedJd.hiddenJavaClasses,
		childFirstClassLoader : $scope.selectedJd.childFirstClassLoader,

	};

	$scope.ok = function() {
		$scope.selectedJd.childFirstClassLoader = $scope.data.childFirstClassLoader;
		$scope.selectedJd.hiddenJavaClasses = $scope.data.hiddenJavaClasses;
		$scope.selectedJd.specificIsolationContext = $scope.data.specificIsolationContext;
		$uibModalInstance.close();
	};
});


jqmApp.controller('jdCron', function($scope, $uibModalInstance, $interval, jd, queues) {
	$scope.selectedJd = jd;
	$scope.queues = [];
	$scope.selectedSchedule = [];
	$scope.selectedSchedulePrm = [];
	
	$scope.data = {
			jd: $scope.selectedJd
	}
	
	
	$scope.queues.push({id: null, name: 'none'});
	$.each(queues, function() {
		$scope.queues.push(this);
	});
	
	$scope.gridOptionsCron = {
			data : 'selectedJd.schedules',

			enableSelectAll : false,
			enableRowSelection : true,
			enableRowHeaderSelection : false,
			enableFullRowSelection : true,
			enableFooterTotalSelected : false,
			multiSelect : false,
			
			enableColumnMenus : false,
			enableCellEditOnFocus : true,
			virtualizationThreshold : 20,
			enableHorizontalScrollbar : 0,

			onRegisterApi : function(gridApi) {
				$scope.gridApiCron = gridApi;
				gridApi.selection.on.rowSelectionChanged($scope, function(rows) {
					$scope.selectedSchedule = gridApi.selection.getSelectedRows();
				});
				
				gridApi.cellNav.on.navigate($scope,function(newRowCol, oldRowCol){
					if (newRowCol !== oldRowCol)
					{
						gridApi.selection.selectRow(newRowCol.row.entity);
					}
	            });
			},

			
			columnDefs : [
					{
						field : 'cronExpression',
						displayName : 'Cron expression',
						width : '***',
					},
					{
						field : 'queue',
						displayName : 'Queue override',
						cellTemplate : '<div class="ui-grid-cell-contents"><span ng-cell-text>{{ (row.entity["queue"] | getByProperty:"id":grid.appScope.queues).name }}</span></div>',
						editableCellTemplate : 'ui-grid/dropdownEditor',
						editDropdownValueLabel : 'name',
						editDropdownOptionsArray : $scope.queues,
						width : '*',
					},
			]
		};
	
	$scope.newcron = function() {
		var t = {
			id: null,
			cronExpression: "* * * * *",
			queue : null,
			parameters: [],
		};
		$scope.selectedJd.schedules.push(t);
		$scope.gridApiCron.selection.selectRow(t);
        $interval(function() {
            $scope.gridApiCron.cellNav.scrollToFocus(t, $scope.gridOptionsCron.columnDefs[0]);
        }, 0, 1);
	};
	
	$scope.removecron = function() {
		var q = null;
		for (var i = 0; i < $scope.selectedSchedule.length; i++) {
			q = $scope.selectedSchedule[i];
			$scope.selectedJd.schedules.splice($scope.selectedJd.schedules.indexOf(q), 1);
		}
		$scope.selectedSchedule.length = 0;
	};
	
	$scope.gridOptionsCronPrm = {
			data : 'selectedSchedule[0].parameters',

			enableSelectAll : false,
			enableRowSelection : true,
			enableRowHeaderSelection : false,
			enableFullRowSelection : true,
			enableFooterTotalSelected : false,
			multiSelect : false,
			
			enableColumnMenus : false,
			enableCellEditOnFocus : true,
			virtualizationThreshold : 20,
			enableHorizontalScrollbar : 0,

			onRegisterApi : function(gridApi) {
				$scope.gridApiCronPrm = gridApi;
				gridApi.selection.on.rowSelectionChanged($scope, function(rows) {
					$scope.selectedSchedulePrm = gridApi.selection.getSelectedRows();
				});
				
				gridApi.cellNav.on.navigate($scope,function(newRowCol, oldRowCol){
					if (newRowCol !== oldRowCol)
					{
						gridApi.selection.selectRow(newRowCol.row.entity);
					}
	            });
			},

			
			columnDefs : [
					{
						field : 'key',
						displayName : 'Key',
						width : '*',
					},
					{
						field : 'value',
						displayName : 'Value',
						width : '*',
					},
			]
		};
	
	$scope.newcronprm = function() {
		var t = {
			key: "key",
			value: "value",
		};
		$scope.selectedSchedule[0].parameters.push(t);
		$scope.gridApiCronPrm.selection.selectRow(t);
        $interval(function() {
            $scope.gridApiCronPrm.cellNav.scrollToFocus(t, $scope.gridOptionsCron.columnDefs[0]);
        }, 0, 1);
	};
	
	$scope.removecronprm = function() {
		var q = null;
		for (var i = 0; i < $scope.selectedSchedulePrm.length; i++) {
			q = $scope.selectedSchedulePrm[i];
			$scope.selectedSchedule[0].parameters.splice($scope.selectedSchedule[0].parameters.indexOf(q), 1);
		}
		$scope.selectedSchedulePrm.length = 0;
	};
	
	$scope.ok = function() {
		$uibModalInstance.close();
	};
});
