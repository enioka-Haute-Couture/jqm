[main]
cacheManager = com.enioka.jqm.webui.shiro.UserCacheManager
securityManager.cacheManager = $cacheManager

cm = org.apache.shiro.authc.credential.HashedCredentialsMatcher
cm.hashAlgorithmName = SHA-512
cm.hashIterations = 100000
cm.storedCredentialsHexEncoded = true

dbRealm = com.enioka.jqm.webui.shiro.JdbcRealm
dbRealm.credentialsMatcher = $cm
dbRealm.authenticationCachingEnabled = true
securityManager.realms = $dbRealm

# Custom basic HTTP filter which does not trigger browser auth prompts inside interactive applications
authcBasicWs = com.enioka.jqm.webui.shiro.BasicHttpAuthenticationFilter
authcBasicWs.applicationName = JQM

# Sessions : basic in-memory handling.
sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
securityManager.sessionManager = $sessionManager

securityManager.sessionManager.globalSessionTimeout = 3600000

sessionValidationScheduler = org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
sessionValidationScheduler.interval = 1800000
securityManager.sessionManager.sessionValidationScheduler = $sessionValidationScheduler

sessionStorageEvaluator = com.enioka.jqm.webui.shiro.SessionEvaluator
securityManager.subjectDAO.sessionStorageEvaluator = $sessionStorageEvaluator

# Form authentication is allowed for the interactive web client.
authc.loginUrl = /auth/login.html
securityManager.sessionManager.sessionIdCookieEnabled = true


[urls]
#######################
## Admin URL
#######################

# REST resources are protected according to the verb used
/ws/admin/node/** = noSessionCreation, authcBasicWs, rest[node]
/ws/admin/q/** = noSessionCreation, authcBasicWs, rest[queue]
/ws/admin/qmapping/** = noSessionCreation, authcBasicWs, rest[qmapping]
/ws/admin/jndi/** = noSessionCreation, authcBasicWs, rest[jndi]
/ws/admin/prm/** = noSessionCreation, authcBasicWs, rest[prm]
/ws/admin/jd/** = noSessionCreation, authcBasicWs, rest[jd]
/ws/admin/user/** = noSessionCreation, authcBasicWs, rest[user]
/ws/admin/role/** = noSessionCreation, authcBasicWs, rest[role]

# This address allows client to retrieve all their own permissions, therefore it has to be in the logged-in only zone too but without checks
/ws/admin/me= authcBasicWs


#######################
## Client URL
#######################

/ws/client/ji/query = noSessionCreation, authcBasicWs, perms["job_instance:read"]
/ws/client/ji/files/** = noSessionCreation, authcBasicWs, perms["files:read"]
/ws/client/ji/*/std* = noSessionCreation, authcBasicWs, perms["logs:read"]
/ws/client/ji/*/position** = noSessionCreation, authcBasicWs, perms["queue_position:create"]
/ws/client/user/*/ji = noSessionCreation, authcBasicWs, perms[job_instance]
/ws/client/ji/** =  noSessionCreation, authcBasicWs, rest[job_instance]
/ws/client/q/*/* = noSessionCreation, authcBasicWs, perms[queue_position:create]
/ws/client/q/** = noSessionCreation, authcBasicWs, rest[queue]
/ws/client/jd/** = noSessionCreation, authcBasicWs, rest[jd]
/ws/client/schedule/** = noSessionCreation, authcBasicWs, rest[job_instance]


#######################
## Simple URL
#######################

/ws/simple/ji = noSessionCreation, authcBasicWs, rest[job_instance]
/ws/simple/file = noSessionCreation, authcBasicWs, rest[job_instance]
/ws/simple/status = noSessionCreation, authcBasicWs, rest[job_instance]
/ws/simple/stdout = noSessionCreation, authcBasicWs, perms["logs:read"]
/ws/simple/stderr = noSessionCreation, authcBasicWs, perms["logs:read"]
/ws/simple/localnode/** = noSessionCreation, authcBasicWs, perms["logs:read"]


#######################
## Static URL
#######################

/dist/*.js = authc
/dist/*.css = authc
/dist/*.svg = authc
/dist/*.ttf = authc
/dist/*.eot = authc
/index.html = authc
/dist/favicon.png = anon
/dist/*.png = authc
/dist/*.woff = authc
/dist/*.woff2 = authc


#######################
## Misc URL
#######################

# Allow interactive login & logout
/auth/logout = logout
/auth/login.html = authc
/auth/* = anon

# Root is equivalent to the index page: just be logged in (interactive).
/ = authc

# Default is: protected
/** = authcBasicWs, perms["doesnotexistsoadminonly"]
