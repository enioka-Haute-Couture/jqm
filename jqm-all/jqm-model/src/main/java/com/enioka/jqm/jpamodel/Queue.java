/**
 * Copyright Â© 2013 enioka. All rights reserved
 * Authors: Marc-Antoine GOUILLART (marc-antoine.gouillart@enioka.com)
 *          Pierre COPPEE (pierre.coppee@enioka.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.enioka.jqm.jpamodel;

import java.io.Serializable;

import com.enioka.jqm.jdbc.DbConn;
import com.enioka.jqm.jdbc.QueryResult;

public class Queue implements Serializable
{
    private static final long serialVersionUID = 4677042929807285233L;

    private int id;

    private String name;
    private String description;

    private Integer timeToLive = 0;

    private boolean defaultQueue;

    /**
     * Functional key. Queues are specified by name inside all APIs. Must be unique.<br>
     * Max length is 50.
     */
    public String getName()
    {
        return name;
    }

    /**
     * Mandatory description.<br>
     * Max length is 1000.
     */
    public String getDescription()
    {
        return description;
    }

    /**
     * See {@link #getName()}
     */
    public void setName(final String name)
    {
        this.name = name;
    }

    /**
     * See {@link #getDescription()}
     */
    public void setDescription(final String description)
    {
        this.description = description;
    }

    /**
     * A technical ID without any meaning. Generated by the database.
     */
    public int getId()
    {
        return id;
    }

    /**
     * See {@link #getId()}
     */
    void setId(final int id)
    {
        this.id = id;
    }

    /**
     * There is only one (and always one) queue which is the "default queue", which is used for operations requiring a queue when no queue
     * is specified.
     */
    public boolean isDefaultQueue()
    {
        return defaultQueue;
    }

    /**
     * See {@link #isDefaultQueue()}
     */
    public void setDefaultQueue(final boolean defaultQueue)
    {
        this.defaultQueue = defaultQueue;
    }

    /**
     * Not used for now. Reserved. Should be the max time to wait inside the queue.
     */
    public Integer getTimeToLive()
    {
        return timeToLive;
    }

    /**
     * See {@link #getTimeToLive()}
     */
    public void setTimeToLive(Integer timeToLive)
    {
        this.timeToLive = timeToLive;
    }

    /**
     * Create a new entry in the database. No commit performed.
     */
    public static Queue create(DbConn cnx, String name, String description, boolean defaultQ)
    {
        QueryResult r = cnx.runUpdate("q_insert", defaultQ, name, description);
        Queue res = new Queue();
        res.id = r.getGeneratedId();
        res.name = name;
        res.description = description;
        return res;
    }
}
