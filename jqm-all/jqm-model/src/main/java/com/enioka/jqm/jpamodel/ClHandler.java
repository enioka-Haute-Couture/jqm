package com.enioka.jqm.jpamodel;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * <strong>Not part of any API - this an internal JQM class and may change without notice.</strong> <br>
 * JPA persistence class for storing the definition of the different event handlers hooked on a given class loader ({@link Cl}).
 */
@Entity
@Table(name = "ClHandler")
public class ClHandler implements Serializable
{
    private static final long serialVersionUID = 5745009392739191779L;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer id;

    @Column(length = 50, name = "eventType", nullable = false)
    @Enumerated(EnumType.STRING)
    ClEvent eventType;

    @Column(length = 100, name = "type", nullable = false)
    String className;

    @OneToMany(orphanRemoval = true, cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @JoinColumn(name = "Handler")
    private List<ClHandlerParameter> parameters = new ArrayList<ClHandlerParameter>();

    /**
     * A technical ID without any meaning. Generated by the database.
     */
    public Integer getId()
    {
        return id;
    }

    /**
     * See {@link #setId(Integer)}
     */
    public void setId(Integer id)
    {
        this.id = id;
    }

    /**
     * The type of event this is a hook for. Basically, the event the handler subscribes to.
     */
    public ClEvent getEventType()
    {
        return eventType;
    }

    /**
     * See {@link #getEventType()}
     */
    public void setEventType(ClEvent type)
    {
        this.eventType = type;
    }

    /**
     * The fully qualified name of the handler class. It must implement an interface (specific type depending on the event type).
     */
    public String getClassName()
    {
        return className;
    }

    /**
     * See {@link #getClassName()}
     */
    public void setClassName(String className)
    {
        this.className = className;
    }

    /**
     * A set of key/value pairs (without order) which are passed to the handler at runtime. The content of this dictionary is only used by
     * the handler, never by the engine.
     */
    public List<ClHandlerParameter> getParameters()
    {
        return parameters;
    }

    /**
     * See {@link #getParameters()}
     */
    public void setParameters(List<ClHandlerParameter> parameters)
    {
        this.parameters = parameters;
    }

}
